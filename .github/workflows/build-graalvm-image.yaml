name: build-graalvm-images
run-name: Build ${{ inputs.project_name }} GraalVM image (${{ inputs.version }})

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: Origin project name
        required: true
      version:
        description: The version of the image to be built
        required: true
      bundle_s3_uri:
        description: The S3 URI (s3://{bucket}/{object_key}) for the GraalVM bundle
        required: true
      is_trunk:
        description: If the images being pushed are from the git trunk (e.g. master)
        type: boolean
        required: true
      tag:
        description: Git tag to apply to image, if any
      pr:
        description: Github PR number to build, if any
      production_mode:
        description: PRODUCTION_MODE environment variable

env:
  PUBLIC_REGISTRY: ghcr.io
  REPOSITORY: core0

jobs:
  build-graalvm-images:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Copy GraalVM Bundle from S3
        run: aws s3 cp "${{ inputs.bundle_s3_uri }}" ./bundle.nib
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CI_READER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CI_READER_SECRET_KEY }}
      - run: echo "PRODUCTION_MODE=${{ inputs.production_mode }}" >> $GITHUB_ENV
      - run: curl https://github.com/core0-io/nvtop/releases/download/latest/nvtop-Linux-ARM64 --fail --output nvtop && chmod 777 nvtop

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.PUBLIC_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_WRITE_PAT }}

      - name: Extract metadata for Public Docker
        id: meta-public
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.PUBLIC_REGISTRY }}/${{ github.repository_owner }}/${{ inputs.project_name }}
          labels: |
            org.opencontainers.image.revision=${{ inputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
            org.opencontainers.image.title=${{ inputs.project_name }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
          annotations: |
            org.opencontainers.image.revision=${{ inputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
            org.opencontainers.image.title=${{ inputs.project_name }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
          tags: |
            type=raw,value=${{ inputs.tag }}-arm64,enable=${{ inputs.tag != '' && inputs.tag != 'false' }}
            type=raw,value=latest-arm64,enable=${{ inputs.tag != '' && inputs.tag != 'false' }}
            type=raw,value=testing-arm64,enable=${{ inputs.tag == '' || inputs.tag == 'false' && inputs.is_trunk }}

      - name: Build and push
        id: public_docker_build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile-graalvm
          context: .
          platforms: linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta-public.outputs.tags }}
          labels: ${{ steps.meta-public.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DISTROLESS_TAG=latest

      - name: Image digest
        run: echo ${{ steps.public_docker_build.outputs.digest }}

      - name: Login to Harbor Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_REGISTRY_USERNAME }}
          password: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}

      - name: Extract metadata for Private Docker
        id: meta-private
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.HARBOR_REGISTRY }}/${{ env.REPOSITORY }}/${{ inputs.project_name }}
          labels: |
            org.opencontainers.image.revision=${{ inputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
            org.opencontainers.image.title=${{ inputs.project_name }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
          annotations: |
            org.opencontainers.image.revision=${{ inputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
            org.opencontainers.image.title=${{ inputs.project_name }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ inputs.project_name }}
          tags: |
            type=raw,value=${{ inputs.tag }}-arm64,enable=${{ inputs.tag != '' && inputs.tag != 'false' }}
            type=raw,value=pr-${{ inputs.pr }}-arm64,enable=${{ inputs.pr != '' }}
            type=raw,value=latest-arm64,enable=${{ inputs.tag == '' || inputs.tag == 'false' && inputs.is_trunk }}

      - name: Build and push
        id: private_docker_build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile-graalvm
          context: .
          platforms: linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta-private.outputs.tags }}
          labels: ${{ steps.meta-private.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DISTROLESS_TAG=debug

      - name: Image digest
        run: echo ${{ steps.private_docker_build.outputs.digest }}
